# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_bigram.ipynb.

# %% auto 0
__all__ = ['data', 'n', 'train_data', 'val_data', 'batch_size', 'block_size', 'xb', 'yb', 'get_batch', 'BigramLanguageModel']

# %% ../nbs/01_bigram.ipynb 3
import torch
import torch.nn as nn
from torch.nn import functional as F

# %% ../nbs/01_bigram.ipynb 5
import pickle

with open('encoded_input.pkl', 'rb') as file:
    encoded_input = pickle.load(file)

# %% ../nbs/01_bigram.ipynb 8
data = torch.tensor(encoded_input, dtype=torch.long)

# %% ../nbs/01_bigram.ipynb 11
n = int(0.9*len(data))
train_data = data[:n]
val_data = data[n:]

# %% ../nbs/01_bigram.ipynb 13
torch.manual_seed(1337)
batch_size = 4 #how many sequences to process in parallel
block_size = 8 #what is the maximum numeber of chars used to make predicitions?

def get_batch(split):
    # generate a small batch of data of inputs x and targets y
    data =train_data if split == 'train' else val_data
    ix = torch.randint(len(data) - block_size, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    return x, y

xb, yb = get_batch('train')
print('inputs: ')
print(xb.shape)
print(xb)
print('targets: ')
print(yb.shape)
print(yb)

# %% ../nbs/01_bigram.ipynb 15
torch.manual_seed(1337)

class BigramLanguageModel(nn.Module):
    
    def __init__(self, vocab_size):
        super().__init__()
        # each token reads off the logits for the next token from a lookup table
        self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)
        
    def forward(self, idx, targets=None):
        # idx and targets are both (B, T) tensors of integers
        logits = self.token_embedding_table(idx) #(B, T, C)
        if targets is None:
            loss = None
        else:
            B, T, C = logits.shape
            logits = logits.view(B*T, C)
            targets = targets.view(B*T)
            loss = F.cross_entropy(logits, targets)
        
        return logits, loss
    
    def generate(self, idx, max_new_tokens):
        # idx is (B,T) array of indices in the current context
        for _ in range(max_new_tokens):
            # get predicions
            logits, loss = self(idx)
            # focus only on the last time step
            logits = logits[:, -1, :] # becomes (B,C)
            # apply softmax to get probabilities
            probs = F.softmax(logits, dim=1) # (B,C)
            # sample from the distribution
            idx_next = torch.multinomial(probs, num_samples=1) #(B,1)
            # append sampled index to the running sequence
            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)
        return idx
            

[
  {
    "objectID": "bigram.html",
    "href": "bigram.html",
    "title": "bigram model",
    "section": "",
    "text": "We will be using PyTorch for this model:\n\nimport torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\nHyperparameters:\n\nbatch_size = 32 # how many sequences will we process in parallel?\nblock_size = 8 # what is the maximum context length?\nmax_iters = 3000\neval_interval = 300\nlearning_rate = 1e-2\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu' # use cuda if available\neval_iters = 200\n\ntorch.manual_seed(1337)\n\n<torch._C.Generator>\n\n\nGetting the Tiny Shakepeare dataset (a small text file containing all the works of Shakepeare):\n\n!wget -O /home/nclark/git/framework_gpt/nbs/data/input.txt https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\n\nwith open('/home/nclark/git/framework_gpt/nbs/data/input.txt', 'r', encoding='utf-8') as f:\n    text = f.read()\n\n--2023-02-09 13:31:12--  https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.111.133, 185.199.109.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1115394 (1.1M) [text/plain]\nSaving to: ‘/home/nclark/git/framework_gpt/nbs/data/input.txt’\n\n/home/nclark/git/fr 100%[===================>]   1.06M  --.-KB/s    in 0.1s    \n\n2023-02-09 13:31:12 (7.37 MB/s) - ‘/home/nclark/git/framework_gpt/nbs/data/input.txt’ saved [1115394/1115394]\n\n\n\nVocabulary Creation and Encoder:\n\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\n\nstoi = {ch:i for i,ch in enumerate(chars)}\nitos = {i:ch for i,ch in enumerate(chars)}\nencode = lambda s: [stoi[c] for c in s] #encoder: string -> list of integers\ndecode = lambda l: ''.join(itos[i] for i in l) #decoder: list of integers -> string\n\n90/10 split into training and validation sets\n\ndata = torch.tensor(encode(text), dtype=torch.long)\nn = int(0.9*len(data))\ntrain_data = data[:n]\nval_data = data[n:]\n\nData Loading:\n\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data =train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    x,y = x.to(device), y.to(device)\n    return x, y\n\nCreate an estimate_loss function for evaluation while training:\n\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X,Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\nBigram Model:\n\nclass BigramLanguageModel(nn.Module):\n    \n    def __init__(self, vocab_size):\n        super().__init__()\n        # each token reads off the logits for the next token from a lookup table\n        self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)\n        \n    def forward(self, idx, targets=None):\n        # idx and targets are both (B, T) tensors of integers\n        logits = self.token_embedding_table(idx) #(B, T, C)\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B*T, C)\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits, targets)\n        \n        return logits, loss\n    \n    def generate(self, idx, max_new_tokens):\n        # idx is (B,T) array of indices in the current context\n        for _ in range(max_new_tokens):\n            # get predicions\n            logits, loss = self(idx)\n            # focus only on the last time step\n            logits = logits[:, -1, :] # becomes (B,C)\n            # apply softmax to get probabilities\n            probs = F.softmax(logits, dim=1) # (B,C)\n            # sample from the distribution\n            idx_next = torch.multinomial(probs, num_samples=1) #(B,1)\n            # append sampled index to the running sequence\n            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)\n        return idx\n\nInitialize Model:\n\nmodel = BigramLanguageModel(vocab_size)\nm = model.to(device)\n\nOptimizer and Training Loop:\n\noptimizer = torch.optim.AdamW(m.parameters(), lr=learning_rate)\n\nfor iter in range(max_iters):\n    \n    # evaluate the loss on train and val sets every eval_interval\n    if iter % eval_interval == 0:\n        losses = estimate_loss()\n        print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n    \n    # sample a batch of data\n    xb, yb = get_batch('train')\n    \n    #evluate the loss\n    logits, loss = m(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\nstep 0: train loss 4.7305, val loss 4.7241\nstep 300: train loss 2.8110, val loss 2.8249\nstep 600: train loss 2.5434, val loss 2.5682\nstep 900: train loss 2.4932, val loss 2.5088\nstep 1200: train loss 2.4863, val loss 2.5035\nstep 1500: train loss 2.4665, val loss 2.4921\nstep 1800: train loss 2.4683, val loss 2.4936\nstep 2100: train loss 2.4696, val loss 2.4846\nstep 2400: train loss 2.4638, val loss 2.4879\nstep 2700: train loss 2.4738, val loss 2.4911\n\n\nGenerate Text:\n\ncontext = torch.zeros((1,1), dtype=torch.long, device=device)\nprint(decode(model.generate(context, max_new_tokens=500)[0].tolist()))\n\n\nMARI he avayokis erceller thour d, myono thishe me tord se by he me, Forder anen: at trselorinjulour t yoru thrd wo ththathy IUShe bavidelanoby man ond be jus as g e atot Meste hrle s, ppat t JLENCOLIUS:\nOppid tes d s o ged moer y pevehear soue maramapay fo t: bueyo malalyo!\nDuir.\nFl ke it I t l o'ddre d ondu s?\ncr, havetrathackes w.\nPUpee meshancun, hrendspouthoulouren whel's'sesoread pe, s whure our heredinsethes; sedsend r lo pamit,\nQUMIVIVIOfe m ne RDINid we tr ort; t:\nMINENXI l dintandore r"
  },
  {
    "objectID": "bigram_v2.html",
    "href": "bigram_v2.html",
    "title": "bigram model",
    "section": "",
    "text": "We will be using PyTorch for this model:\n\nimport torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\nHyperparameters:\n\nbatch_size = 32 # how many sequences will we process in parallel?\nblock_size = 8 # what is the maximum context length?\nmax_iters = 5000\neval_interval = 500\nlearning_rate = 1e-3\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu' # use cuda if available\neval_iters = 200\nn_embd = 32\ntorch.manual_seed(1337)\n\n<torch._C.Generator>\n\n\nGetting the Tiny Shakepeare dataset (a small text file containing all the works of Shakepeare):\n\n!wget -O /home/nclark/git/framework_gpt/nbs/data/input.txt https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\n\nwith open('/home/nclark/git/framework_gpt/nbs/data/input.txt', 'r', encoding='utf-8') as f:\n    text = f.read()\n\n--2023-02-09 14:46:56--  https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.111.133, 185.199.108.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1115394 (1.1M) [text/plain]\nSaving to: ‘/home/nclark/git/framework_gpt/nbs/data/input.txt’\n\n/home/nclark/git/fr 100%[===================>]   1.06M  --.-KB/s    in 0.1s    \n\n2023-02-09 14:46:56 (7.11 MB/s) - ‘/home/nclark/git/framework_gpt/nbs/data/input.txt’ saved [1115394/1115394]\n\n\n\nVocabulary Creation and Encoder:\n\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\n\nstoi = {ch:i for i,ch in enumerate(chars)}\nitos = {i:ch for i,ch in enumerate(chars)}\nencode = lambda s: [stoi[c] for c in s] #encoder: string -> list of integers\ndecode = lambda l: ''.join(itos[i] for i in l) #decoder: list of integers -> string\n\n90/10 split into training and validation sets\n\ndata = torch.tensor(encode(text), dtype=torch.long)\nn = int(0.9*len(data))\ntrain_data = data[:n]\nval_data = data[n:]\n\nData Loading:\n\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data =train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    x,y = x.to(device), y.to(device)\n    return x, y\n\nCreate an estimate_loss function for evaluation while training:\n\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X,Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\nBigram Model:\n\nclass Head(nn.Module):\n    \"\"\"one head of self-attention\"\"\"\n    \n    def __init__(self, head_size):\n        super().__init__()\n        self.key = nn.Linear(n_embd, head_size, bias=False)\n        self.query = nn.Linear(n_embd, head_size,bias=False)\n        self.value = nn.Linear(n_embd, head_size, bias=False)\n        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n    \n    def forward(self, x):\n        B,T,C = x.shape\n        k = self.key(x)\n        q = self.query(x)\n        # computer attention scores\n        wei = q @ k.transpose(-2,-1) * C**-0.5 # (B, T, 16) @ (B, 16, T) ---> (B,T,T)\n        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf')) # (B,T,T)\n        wei = F.softmax(wei, dim=-1) #(B,T,T)\n        # weighted aggregation of values\n        v = self.value(x) #(B,T,C)\n        out = wei @ v #(B,T,T) @ (B,T,C) _> (B,T,C)\n        return out\n\n\nclass MultiHeadAttention(nn.Module):\n    \"\"\"multiple heads of self-attention in parallel\"\"\"\n    \n    def __init__(self, num_heads, head_size):\n        super().__init__()\n        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])\n        \n    def forward(self, x):\n        return torch.cat([h(x) for h in self.heads], dim=-1)\n\n\nclass BigramLanguageModel(nn.Module):\n    \n    def __init__(self):\n        super().__init__()\n        # each token reads off the logits for the next token from a lookup table\n        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n        self.position_embedding_table = nn.Embedding(block_size, n_embd)\n        self.sa_heads =MultiHeadAttention(4, n_embd//4) #4 heads of 8-dimensional self-attention\n        self.lm_head = nn.Linear(n_embd, vocab_size)\n\n    def forward(self, idx, targets=None):\n        B, T = idx.shape\n        \n        # idx and targets are both (B, T) tensors of integers\n        tok_emb = self.token_embedding_table(idx) #(B,T,C)\n        pos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)\n        x = tok_emb + pos_emb # (B,T,C)\n        x = self.sa_heads(x) #apply one head of self-attention\n        logits = self.lm_head(x) #(B,T,vocab_size)\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B*T, C)\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits, targets)\n        \n        return logits, loss\n    \n    def generate(self, idx, max_new_tokens):\n        # idx is (B,T) array of indices in the current context\n        for _ in range(max_new_tokens):\n            #crop idx to the last block_size tokens\n            idx_cond = idx[:, -block_size:]\n            # get predicions\n            logits, loss = self(idx_cond)\n            # focus only on the last time step\n            logits = logits[:, -1, :] # becomes (B,C)\n            # apply softmax to get probabilities\n            probs = F.softmax(logits, dim=1) # (B,C)\n            # sample from the distribution\n            idx_next = torch.multinomial(probs, num_samples=1) #(B,1)\n            # append sampled index to the running sequence\n            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)\n        return idx\n\nInitialize Model:\n\nmodel = BigramLanguageModel()\nm = model.to(device)\n\nOptimizer and Training Loop:\n\noptimizer = torch.optim.AdamW(m.parameters(), lr=learning_rate)\n\nfor iter in range(max_iters):\n    \n    # evaluate the loss on train and val sets every eval_interval\n    if iter % eval_interval == 0:\n        losses = estimate_loss()\n        print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n    \n    # sample a batch of data\n    xb, yb = get_batch('train')\n    \n    #evluate the loss\n    logits, loss = m(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\nstep 0: train loss 4.2933, val loss 4.2968\nstep 500: train loss 2.6631, val loss 2.6575\nstep 1000: train loss 2.5354, val loss 2.5247\nstep 1500: train loss 2.4781, val loss 2.4689\nstep 2000: train loss 2.4364, val loss 2.4388\nstep 2500: train loss 2.3951, val loss 2.4072\nstep 3000: train loss 2.3656, val loss 2.3884\nstep 3500: train loss 2.3505, val loss 2.3596\nstep 4000: train loss 2.3166, val loss 2.3502\nstep 4500: train loss 2.3141, val loss 2.3229\n\n\nGenerate Text:\n\ncontext = torch.zeros((1,1), dtype=torch.long, device=device)\nprint(decode(model.generate(context, max_new_tokens=500)[0].tolist()))\n\n\n\nWherre chey thark,\nAndinfe thand ther, we oto.\n\nThe hin.\n\nABcat\nR :\nLE:\nK:\nWheline lillo anerd fol othouadbe nd th:\nOe be.\nQEUELORYo word wheo?\n\nWyor I:\nI th aus Euld't ceryondm's ourrse;\nHansas sthe Ecokrnd.\nBUSu tour tt eslf bllle dirord ht wacetea yous, PEE:\nCoutr withorm sande, fo st othe hd tter yos I cubne seg min:\nTher'liy houre er\nI ate itertohorudr, Bulded the'dd En RWH:\nWy,\nIWees sbece fount CIHICARLCENTOD BRE:\nCAthe kallden thit.\n\nAd sondno ha quy, I:\nCubre ellids bles dalato frer th"
  }
]